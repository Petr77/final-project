<div class="container">
  <br>
    <h2><%= @location.title %></h2>
    <h4><%= @location.address %></h4>
  <br>


  <div id="carouselImages" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
      <% @location.images[0..8].each_with_index do |img,i| %>
        <li data-target="#carouselImages" data-slide-to="<%= i %>" class="<%= 'active' if i == 0 %>"></li>
      <% end %>
    </ol>
    <div class="carousel-inner" role="listbox">
      <% @location.images[0..8].each_with_index do |img,i| %>
        <div class="carousel-item <%= 'active' if i == 0 %>">
          <%= image_tag img.url, class: "d-block img-fluid" %>
        </div>
      <% end %>
    </div>
    <a class="carousel-control-prev" href="#carouselImages" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselImages" role="button" data-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
    </a>
  </div>

  <div id="map"></div>

  <input id="search-input" class="controls" type="text" placeholder="Search Box">

  <div class="links">
    <div class="place-show" place="restaurant">Restaurants</div>
    <div class="place-show" place="store">Stores</div>
    <div class="place-show" place="spa">Spa</div>
    <div class="place-show" place="beauty_salon">Beauty Salon</div>
    <div class="place-show" place="bar">Bar</div>
  </div>


  <script>
    var map;
    var infowindow;
    var accom = {lat: <%= @location.latitude %>, lng: <%= @location.longitude %> };
    var markers = [];
    var placesService;


    $('.place-show').on('click', function(){
      showPlaces( $(this).attr('place') );
    });

    function initMap() {

      map = new google.maps.Map(document.getElementById('map'), {
        center: accom,
        zoom:14,
      });

      var pinImage = new google.maps.MarkerImage("http://www.googlemapsmarkers.com/v1/A/0099FF/");

      var marker = new google.maps.Marker({
      position: accom,
      icon: pinImage
      });
      marker.setMap(map);

      // placesService = google.maps.places.PlacesService(map);

      var input = document.getElementById('search-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        // Clear out the old markers.
        markers.forEach(function(marker) {
          marker.setMap(null);
        });
        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }
          var icon = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location
          }));

          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
    }



    var showPlaces = function(placeType){

      placesService = new google.maps.places.PlacesService(map);

      markers.forEach(function(m){
        m.setMap(null);
      });
      markers = [];

      placesService.nearbySearch({
        location: accom,
        radius: 5000,
        type: [placeType]
      }, placeMarkerCallback);
    };

    function placeMarkerCallback(results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
          createMarker(results[i]);
        }
      }
    }

    function createMarker(place) {
      var placeLoc = place.geometry.location;
      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });


      markers.push( marker );

      var infowindow = new google.maps.InfoWindow();

      google.maps.event.addListener(marker, 'click', function() {
        infowindow.setContent(place.name);
        infowindow.open(map, this);

        placesService.getDetails({ reference: place.reference }, function(details, status){
          console.log(details, status);
        });

      });
    }

  </script>

  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAHUFsZfdiSTlWvUkgwPWHwrmzfLAQQJyk&libraries=places&callback=initMap"></script>

</div>
